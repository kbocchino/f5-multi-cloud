#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright 2017 by F5 Networks Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import sys
import argparse
import requests
import re
import time
import os
import time

try:
    import json
except ImportError:
    import simplejson as json

# disable request package warnings
requests.packages.urllib3.disable_warnings()

def license(args):
    """
    Function to enumerate list of reg keys.
    Find an avalible reg key.
    License the specified BIGIQ device.
    """

    if args.op == 'grant':
        ##=========================
        # Find a avalible Reg Key
        ##=========================
        print "Enumerate all Reg Key pool to find: {0}".format(args.name)
        uri = 'https://' + args.iq + '/mgmt/cm/device/licensing/pool/regkey/licenses'
        response = requests.get(uri, auth=(args.iq_user, args.iq_pass), verify=False)
        offerings=[]
        i=0
        if response.status_code==200:
            ##=========================================================================================
            # If regkey name is found in list add offerings to list, else create new reg key and exit.
            ##=========================================================================================
            for item in response.json()['items']:
                if item['name'] == args.name:
                    print 'Found Reg Key pool: {0}'.format(args.name)
                    uri_rk=item['selfLink'].replace('localhost', args.iq)
                    uri_rk += "/offerings"

                    ## Get offering base-reg-keys
                    response = requests.get(uri_rk, auth=(args.iq_user, args.iq_pass), verify=False)
                    if response.status_code==200:
                        for item in response.json()['items']:
                            offerings.append(uri_rk + '/' + item['regKey'])
                    else:
                        print 'GET base-reg-key pool offerings failed.'
                
                    if len(offerings)==0:
                        print "There are no license offerings avalible for reg key: {0}. Please add.".format(args.name)
                        sys.exit(1)
                    # Found reg key pool.
                    break
            else:
                print 'ERROR: Could not find avalible reg key pool {0}.'.format(args.name)
                return False
        else:
            print "ERROR: GET failed for pool. {0}".format(json.dumps(response.json()['message'], default=lambda o: o.__dict__, sort_keys=True, indent=4))
            return False

        ##================================================================================================
        # Next lets find out if there are devices already licensed for these offerings discovered above.
        ##================================================================================================
        for i in range (len(offerings)):
            offerings[i] += '/members'
            response = requests.get(offerings[i], auth=(args.iq_user, args.iq_pass), verify=False)
            offering = re.search(r'(offerings)/(.*)./', offerings[i])
        
            # Test to find license key
            if offering is None:
                print "ERROR: Could not find license key offering."
                return False

            if response.status_code==200:
                if len(response.json()['items'])==0:
                    print 'INFO: There are no devices for offering: {0}. POST device {1} to be licensed'.format(offering.group(2), args.ip)
                    # POST data a device to this offering
                    lic_json = {"deviceAddress": args.ip, "httpsPort": args.port, "username": args.ip_user,"password": args.ip_pass}
                    print "INFO: BIGIQ POST a reg key license from offering {0} to BIGIP device {1}".format(offering.group(2), args.ip)
                    response = requests.post(offerings[i], data=str(lic_json), auth=(args.ip_user, args.ip_pass), verify=False)
                
                    print 'INFO: Test device {0} licensing status is LICENSED'.format(args.ip)
                    # Test if device is licensed.
                    
                    if response.status_code==200:
                        while True:
                            response = requests.get(offerings[i], auth=(args.iq_user, args.iq_pass), verify=False)
                            if response.status_code==200:
                                for item in response.json()['items']:
                                    if item['status'] == 'LICENSED':
                                        return True
                                    elif item['status'] == 'INSTALLATION_FAILED':
                                        print 'ERROR: INSTALLATION_FAILED'
                                        return False
                                    else:
                                        print item['status']
                                        time.sleep(2)
                            else:
                                print 'ERROR: Get status failed {0}'.format(response.json())
                                return False
                    else:
                        print "ERROR: {0}".format(json.dumps(response.json()['message'], default=lambda o: o.__dict__, sort_keys=True, indent=4))
                        return False
            else:
                print "ERROR: Reponse from GET offerings failed. Check if BIG-IQ auth is enabled. BIG-IQ shell set-basic-auth on"
                print "ERROR: {0}".format(json.dumps(response.json()['message'], default=lambda o: o.__dict__, sort_keys=True, indent=4))
                return False
        else:
            print "INFO: There are no avalible offerings for RegKey: {0} to license BIGIP {1}".format(args.name, args.ip)
    else:
        print 'INFO: REVOKE REGKEY device license for IP: {0}'.format(args.ip)
        ##=========================
        # REVOKE DEVCE LICENSE
        ##=========================
        print "Enumerate all Reg Key pool to find: {0}".format(args.name)
        uri = 'https://' + args.iq + '/mgmt/cm/device/licensing/pool/regkey/licenses'

        response = requests.get(uri, auth=(args.iq_user, args.iq_pass), verify=False)
        offerings=[]
        i=0
        if response.status_code==200:
            ##=========================================================================================
            # If regkey name is found in list add offerings to list, else create new reg key and exit.
            ##=========================================================================================
            for item in response.json()['items']:
                if item['name'] == args.name:
                    print 'Found Reg Key pool: {0}'.format(args.name)
                    uri_rk=item['selfLink'].replace('localhost', args.iq)
                    uri_rk += "/offerings"
                    ## Get offering base-reg-keys
                    response = requests.get(uri_rk, auth=(args.iq_user, args.iq_pass), verify=False)
                    if response.status_code==200:
                        for item in response.json()['items']:
                            offerings.append(uri_rk + '/' + item['regKey'])
                    else:
                        print 'GET base-reg-key pool offerings failed.'
                
                    if len(offerings)==0:
                        print "There are no license offerings avalible for reg key: {0}. Please add.".format(args.name)
                        sys.exit(1)
                    # Found reg key pool.
                    break
            else:
                print 'ERROR: Could not find avalible reg key pool {0}.'.format(args.name)
                return False
        else:
            print "ERROR: GET failed for pool. {0}".format(json.dumps(response.json()['message'], default=lambda o: o.__dict__, sort_keys=True, indent=4))
            return False

        for member in offerings:
            member+="/members"
            ## Get members for each offering
            response = requests.get(member, auth=(args.iq_user, args.iq_pass), verify=False)
            if response.status_code==200:
                for item in response.json()['items']:
                    if item['deviceAddress'] == args.ip:
                        member+= "/{0}".format(item['id'])
                        ## Delete members for offering
                        del_json = {"username":args.ip_user,"password":args.ip_pass,"id":str(item['id'])}
                        print "INFO: BIGIQ REVOKE a reg key license for BIGIP device {0}".format(args.ip)
                        response = requests.delete(member, data=str(del_json), auth=(args.ip_user, args.ip_pass), verify=False)                   
                        if response.status_code==200:
                            print "INFO: Successfully revoked BIGIP device IP:{0}".format(args.ip)
                            return True
                        else:
                            print "ERROR: response message."
                            print json.dumps(response.json()['message'], default=lambda o: o.__dict__, sort_keys=True, indent=4)
                            return False
                    else:
                        print "INFO: Iterate registration keys to find a device with IP: {0}".format(args.ip)
            else:
                print "ERROR: {0}".format(json.dumps(response.json()['message'], default=lambda o: o.__dict__, sort_keys=True, indent=4))
                return False
                
if __name__ == '__main__':
    #==========================
    # Help
    #==========================
    parser = argparse.ArgumentParser(description='License a BIGIQ using built in registration keys.')
    parser.add_argument('-op', type=str, help='To grant or revoke a license, options are: grant, revoke')
    parser.add_argument('-regkey', type=str, help='Base Registration Key used to license BIG-IQ.')

    #==========================
    # Parser arguments
    #==========================
    args = parser.parse_args()
    result_rk=False

    #===========================
    # Verify
    #===========================
    for n in args.__dict__:
        if args.__dict__[n] == None:
            print "\nERROR: Please pass in all arguments for BIGIQ onboarding.\n"
            os.system("python onboard-bigiq.py -h")
            exit(1)
    else:
        os.system("python onboard-bigiq.py -h")
        exit(1)

    if result_lic == True:
        print "INFO: STATE = LICENSED."
    else:
        print "ERROR: STATE = ERROR."

    #==========================
    # RegKey License Funtion
    #==========================
    result = license(args)


